import GroupAdmin from '../models/GroupAdmin.js';
import Activity from "../models/Activity.js";
import mongoose from "mongoose"; 
export const getActivitiesByGroup = async (req, res) => {
    try {
        const { groupId } = req.params;

        // Ki·ªÉm tra ID nh√≥m c√≥ h·ª£p l·ªá kh√¥ng
        if (!mongoose.Types.ObjectId.isValid(groupId)) {
            return res.status(400).json({ status: 400, message: "ID nh√≥m kh√¥ng h·ª£p l·ªá!" });
        }

        // Ki·ªÉm tra xem nh√≥m c√≥ t·ªìn t·∫°i kh√¥ng
        const group = await GroupAdmin.findById(groupId);
        if (!group) {
            return res.status(404).json({ status: 404, message: "Nh√≥m kh√¥ng t·ªìn t·∫°i!" });
        }

        // üîç L·∫•y danh s√°ch ho·∫°t ƒë·ªông thu·ªôc nh√≥m
        const activities = await Activity.find({ group: groupId })
            .populate("created_by", "name email") // L·∫•y th√¥ng tin ng∆∞·ªùi t·∫°o
            .sort({ date: -1 }); // S·∫Øp x·∫øp theo ng√†y m·ªõi nh·∫•t

        res.status(200).json({
            status: 200,
            message: `Danh s√°ch ho·∫°t ƒë·ªông c·ªßa nh√≥m ${group.name}`,
            activities
        });

    } catch (error) {
        console.error("‚ùå L·ªói l·∫•y danh s√°ch ho·∫°t ƒë·ªông:", error);
        res.status(500).json({ status: 500, message: "L·ªói l·∫•y danh s√°ch ho·∫°t ƒë·ªông", error: error.message });
    }
};

// T·∫°o nh√≥m m·ªõi
export const createGroup = async (req, res) => {
    try {
        const { name, description } = req.body;
        const createdBy = req.user.id;

        const newGroup = new GroupAdmin({ name, description, createdBy });
        await newGroup.save();

        res.status(201).json({ message: "Nh√≥m ƒë√£ ƒë∆∞·ª£c t·∫°o", group: newGroup });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi t·∫°o nh√≥m", error: error.message });
    }
};

// L·∫•y danh s√°ch nh√≥m
export const getGroups = async (req, res) => {
    try {
        const groups = await GroupAdmin.find().populate('createdBy', 'name email');
        res.status(200).json(groups);
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch nh√≥m", error: error.message });
    }
};

// Th√™m th√†nh vi√™n v√†o nh√≥m
export const addMember = async (req, res) => {
    try {
        const { groupId, userId } = req.body;

        const group = await GroupAdmin.findById(groupId);
        if (!group) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nh√≥m" });

        if (group.members.includes(userId)) {
            return res.status(400).json({ message: "Ng∆∞·ªùi d√πng ƒë√£ c√≥ trong nh√≥m" });
        }

        group.members.push(userId);
        await group.save();

        res.status(200).json({ message: "ƒê√£ th√™m th√†nh vi√™n v√†o nh√≥m", group });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi th√™m th√†nh vi√™n", error: error.message });
    }
};

// X√≥a th√†nh vi√™n kh·ªèi nh√≥m
export const removeMember = async (req, res) => {
    try {
        const { groupId, userId } = req.body;

        const group = await GroupAdmin.findById(groupId);
        if (!group) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nh√≥m" });

        group.members = group.members.filter(member => member.toString() !== userId);
        await group.save();

        res.status(200).json({ message: "ƒê√£ x√≥a th√†nh vi√™n kh·ªèi nh√≥m", group });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi x√≥a th√†nh vi√™n", error: error.message });
    }
};

// X√≥a nh√≥m
export const deleteGroup = async (req, res) => {
    try {
        const { groupId } = req.params;

        const group = await GroupAdmin.findByIdAndDelete(groupId);
        if (!group) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nh√≥m" });

        res.status(200).json({ message: "Nh√≥m ƒë√£ b·ªã x√≥a" });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi x√≥a nh√≥m", error: error.message });
    }
};
